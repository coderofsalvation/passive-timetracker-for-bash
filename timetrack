#!/bin/bash 
#
# passive timetrack utility based on bash history and cron
#
# Usage: run timetrack once, edit ~/.timetrack.conf, and add this cronjob:
# 
#  * * * * * /absolute/path/to/timetrack track 
#
# csvfiles are produced as ~/.timetrack-mm-yyyy.csv
# use 'timetrack show' to see a nice overview of those
#
#  Copyright (C) 2015, Leon van Kammen / Coder of Salvation 
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# use history of parent shell 
export HISTTIMEFORMAT="%d/%m/%y %T %a "
HISTFILE=~/.bash_history
TMP=~/.timetrack.tmp
set -o history

config_example="declare -A patterns

# parse maximum 1000 lines of history
maxlines=1000

csvcolumns='date,time,description,type,client'

# key is bash regex, value is csv (see csvcolumns, and modify when desired)
patterns['git push|svn update']='deploying project,deployment,company foo'
patterns['vi|vim|emacs']='working on code in editor,developing,company foo'
patterns['git|svn']='git / svn,version management,company foo'
"

#
# source config
#
[[ ! -f ~/.timetrack.conf ]] && {
  echo "$config_example" > ~/.timetrack.conf 
  echo "please modify ~/.timetrack.conf before running timetrack as a crontab"
  exit 1;
}
. ~/.timetrack.conf

parse_cmd(){
  echo "$1" | awk '{ $1=$2=$3=$4=""; print $0 }'
}

parse_date(){
  echo "$1" | awk '{ print $2","$3 }'
}

track(){
  csvout=~/".timetrack-$( date +%m-%Y).csv"; [[ ! -f "$csvout" ]] && touch "$csvout"
  log="$(<$csvout)"
  history | tail -n$maxlines > $TMP.history 
  while read line; do 
    id="${line/^ //}"; id="${id/ */}"; [[ ! "$id" =~ ^[0-9] ]] && continue
    for pattern in "${!patterns[@]}"; do 
      cmd="$(parse_cmd "$line")"; 
      if [[ "$cmd" =~ $pattern ]]; then 
        item="$(echo "$(parse_date "$line"),\"$csv\"")" 
        csv="${patterns["$pattern"]}"; csv="${csv//,/\",\"}"
        [[ ! "$csvout" =~ "$item" ]] && echo "$item" >> "$csvout" || echo "nee: $item"
      fi
    done
  done < $TMP.history
  cat "$csvout" | sort | uniq > $TMP.csv && mv "$TMP.csv" "$csvout"  # remove duplicates
}

show(){
  { echo -e "$csvcolumns\n--------\n"; cat ~/.timetrack-*.csv; }             \
    | sed 's/""/" "/g' | gawk -vFS='^"|","|"$|",|,"|,'                  \
      '{out=""; for(i=1;i<NF+1&&i<max;i++) out=out"\t"$i; print out }'  \
      max=99999 | column -t -s $'\t'                                    
}

if [[ -n "$1" ]]; then "$@"; else grep -A2 "^# Usage: " "$0" | sed 's/^# //g'; fi
